openapi: 3.0.3
info:
  title: Jobs Service API
  description: A durable background jobs service with progress tracking, retries, and per-organisation concurrency
  version: 1.0.0
servers:
  - url: http://localhost:4500
    description: Development server

paths:
  /health:
    get:
      summary: Health check
      operationId: getHealth
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /jobs:
    post:
      summary: Enqueue a new job
      operationId: createJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
      responses:
        '201':
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateJobResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '413':
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: List jobs
      operationId: listJobs
      parameters:
        - name: orgId
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/JobStatus'
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: includePayload
          in: query
          schema:
            type: integer
            enum: [0, 1]
            default: 0
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListJobsResponse'

  /jobs/{jobId}:
    get:
      summary: Get job details
      operationId: getJob
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: includePayload
          in: query
          schema:
            type: integer
            enum: [0, 1]
            default: 0
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /jobs/{jobId}/cancel:
    post:
      summary: Cancel a job
      operationId: cancelJob
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Cancel request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelJobResponse'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Job cannot be cancelled in current state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /jobs/{jobId}/retry:
    post:
      summary: Retry a failed job
      operationId: retryJob
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job retry successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetryJobResponse'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Job cannot be retried in current state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /jobs/{jobId}/stream:
    get:
      summary: Stream job progress (SSE)
      operationId: streamJobProgress
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Server-sent events stream
          content:
            text/event-stream:
              schema:
                type: string

  /webhooks/test:
    post:
      summary: Send test webhook (dev only)
      operationId: sendTestWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
      responses:
        '200':
          description: Test webhook sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

components:
  schemas:
    JobStatus:
      type: string
      enum: [queued, running, completed, failed, cancelled]

    Job:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        orgId:
          type: string
        status:
          $ref: '#/components/schemas/JobStatus'
        progress:
          type: number
          minimum: 0
          maximum: 1
        attempts:
          type: integer
          minimum: 0
        maxAttempts:
          type: integer
          minimum: 1
        runAt:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
          nullable: true
        finishedAt:
          type: string
          format: date-time
          nullable: true
        result:
          nullable: true
        error:
          nullable: true
        idempotencyKey:
          type: string
          nullable: true
        payload:
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastHeartbeatAt:
          type: string
          format: date-time
          nullable: true
      required:
        - id
        - type
        - orgId
        - status
        - progress
        - attempts
        - maxAttempts
        - runAt
        - createdAt
        - updatedAt

    CreateJobRequest:
      type: object
      properties:
        type:
          type: string
          minLength: 1
        orgId:
          type: string
          minLength: 1
        payload:
          nullable: true
        maxAttempts:
          type: integer
          minimum: 1
          maximum: 10
          default: 3
        runAt:
          type: string
          format: date-time
      required:
        - type
        - orgId

    CreateJobResponse:
      type: object
      properties:
        jobId:
          type: string
      required:
        - jobId

    ListJobsResponse:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        nextCursor:
          type: string
          nullable: true
      required:
        - jobs

    CancelJobResponse:
      type: object
      properties:
        message:
          type: string
        status:
          $ref: '#/components/schemas/JobStatus'
      required:
        - message
        - status

    RetryJobResponse:
      type: object
      properties:
        message:
          type: string
        job:
          $ref: '#/components/schemas/Job'
      required:
        - message
        - job

    HealthResponse:
      type: object
      properties:
        ok:
          type: boolean
        queueDepth:
          type: integer
        running:
          type: integer
        completedLast5m:
          type: integer
        failedLast5m:
          type: integer
        dlqDepth:
          type: integer
        repo:
          type: object
          properties:
            kind:
              type: string
              enum: [memory, redis]
        concurrency:
          type: object
          properties:
            global:
              type: integer
            perOrg:
              type: integer
      required:
        - ok

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
      required:
        - error